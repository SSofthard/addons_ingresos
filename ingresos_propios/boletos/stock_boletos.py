# -*- coding: utf-8 -*-
##############################################################################
#

##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import fields, osv

class stock_boletos (osv.osv):
     
    _name="ip.stock.boletos"
    _inherit = ['mail.thread']
    _rec_name="producto_id"
    
    
    def cantidad_guardados_mostrar(self,cr,uid,ids,field_name,arg, context=None):
        res={}
        for i in self.browse(cr,uid,ids):
            res[i.id]=int(i.ultimo_val)+int(i.cantidad)
            
        return res
    
    def boletos_desde(self,cr,uid,ids,field_name,arg, context=None):
        res={}
        
        for i in self.browse(cr,uid,ids):
            res[i.id]=str(i.prefijo)+'-'+str(i.ultimo_val+1).rjust(i.cantidad_digitos,'0'),
            for d in res[i.id]:
                res[i.id]=d
        return res
        
    def boletos_hasta(self,cr,uid,ids,field_name,arg, context=None):
        res={}
        for i in self.browse(cr,uid,ids):
            res[i.id]=str(i.prefijo)+'-'+str(i.cantidad+i.ultimo_val).rjust(i.cantidad_digitos,'0'),
            for h in res[i.id]:
                res[i.id]=h
        return res
        
    
    
    _columns = {
        'producto_id':fields.many2one(
                'ip.boletos',
                'Boleto',
                required=True,),
        'ultimo_val':fields.integer(
                    'Último Valor',
                    readonly=False,
                help='Este es el último boleto registrado'),
        'ultimo_valor_2':fields.function(
                        cantidad_guardados_mostrar,
                        'Boletos Generados',
                        type='char',
                        help='Este es el último boleto registrado'),
        'cantidad':fields.integer(
                'Cantidad',
                size=10,
                required=True,
                help='Esta es la cantidad de boletos'),
        'cantidad_digitos':fields.integer(
                'Dígitos', 
                required=True,
                help='Esta es la cantidad de dígitos del boleto'),
        'prefijo':fields.char(
                'Prefijo',
                size=10,
                required=True,
                help='Esta es el prefijo del boleto'),
        'boleto_desde':fields.char(
                'Desde',
                size=10,
                readonly=False,),
        'boleto_desde_2':fields.function(
                boletos_desde,
                'Desde',
                type='char',
                ),
        'boleto_hasta':fields.char(
                'Hasta',
                size=10,
                readonly=False,),
        'boleto_hasta_2':fields.function(
                boletos_hasta,
                'Hasta',
                type='char',
                ),
        'secuencia': fields.boolean(
                    'Empezar en cero?', 
                    help="Iniciar nuevamente una secuencia de boletos"),
        'active':fields.boolean(
                    'Activo?', 
                    help="Iniciar nuevamente una secuencia de boletos"),
        'state': fields.selection([
                    ('borrador', 'Borrador'),
                    ('generado', 'Generado'),
                    ('eliminado', 'Eliminado'),
            
            ], 'Estado', readonly=True, copy=False,select=True),
    }
    
    _defaults = {
        'secuencia': False,
        'active':True,
        'state':'borrador'
        }
   
    
    
    def cantidad_guardados(self,cr,uid,ids,producto_id,context=None):
        res={}
        if isinstance(ids,(int,long)):
            ids=[ids]
        boletos_id=self.search(cr,uid,[('producto_id','=',producto_id)],limit=1,order='id desc',context=context)
        boleto=self.browse(cr,uid,boletos_id,context=context)
        res={
                'cantidad_digitos':boleto['cantidad_digitos'],
                'prefijo':boleto['prefijo'],
                'ultimo_valor_2':boleto['ultimo_valor_2'],
                'ultimo_val':boleto['ultimo_val']+boleto['cantidad'],
                'cantidad':'',
                'boleto_desde':'',
                'boleto_hasta':'',
                'boleto_desde_2':'',
                'boleto_hasta_2':'',
            }
        return {'value':res,}
        
    
    def iniciar_secuencia(self,cr,uid,ids,secuencia,context=None):
        res={}
        if secuencia==True:
            res={
                    'cantidad_digitos':'',
                    'prefijo':'',
                    'ultimo_valor_2':'',
                    'ultimo_val':'',
                    'cantidad':'',
                    'boleto_desde':'',
                    'boleto_hasta':'',
                    'boleto_desde_2':'',
                    'boleto_hasta_2':'',
                    }
        return {'value':res,} 
        
    def generar_stock(self,cr,uid,ids,producto_id,ultimo_val,cantidad_digitos,prefijo,cantidad,secuencia,context=None):
        res={}
        if cantidad_digitos and prefijo and cantidad:
           
            boletos_id=self.search(cr,uid,[('producto_id','=',producto_id)],limit=1,order='id desc',context=context)
            boleto=self.browse(cr,uid,boletos_id,context=context)
            cantidad=cantidad+ultimo_val
            ultimo_val=ultimo_val+1
            res={
                'boleto_desde':str(prefijo.upper())+'-'+str(ultimo_val).rjust(cantidad_digitos,'0'),
                'boleto_hasta':str(prefijo.upper())+'-'+str(cantidad).rjust(cantidad_digitos,'0'),
                'boleto_desde_2':str(prefijo.upper())+'-'+str(ultimo_val).rjust(cantidad_digitos,'0'),
                'boleto_hasta_2':str(prefijo.upper())+'-'+str(cantidad).rjust(cantidad_digitos,'0'),
                }
        else:
            res={
                'cantidad':'',
                }
        return {'value':res,}
    
    def eliminar_boleto (self, cr, uid, ids, context=None):
        
        for l in self.browse(cr,uid,ids,context=context):
            inventario_boleto_obj=self.pool.get('ip.inventario.boletos')
            inventario_boleto_id=inventario_boleto_obj.search(cr,uid,[('producto_id','=',int(l.producto_id)),('prefijo','=',l.prefijo)],context=context)
            inventario_boleto_datos=inventario_boleto_obj.browse(cr,uid,inventario_boleto_id,context=context)
            cantidad=inventario_boleto_datos['existente']-l.cantidad
            inventario_boleto_obj.write(cr, uid, inventario_boleto_id, {'existente': cantidad},context=context)
            self.write(cr, uid, ids, {'active': False,'state':'eliminado'},context=context)
        return True
    
    def create(self,cr,uid,vals,context=None):
        vals.update({
                'prefijo':vals['prefijo'].upper()
                })
        prefijos_id=self.search(cr,uid,[('producto_id','=',vals['producto_id'])],context=context)
        prefijos=self.browse(cr,uid,prefijos_id,context=context)
        prefijo_list=[]
        
        if vals['secuencia']==True:
            for p in prefijos:
                prefijo_list.append(str(p.prefijo))
            prefijos_disp={x:1 for x in prefijo_list}.keys()
            for r in prefijos_disp:
                if r==vals['prefijo'].upper():
                    raise osv.except_osv(
                                ('Error de prefijo'),
                                ('El prefijo ya fue utilizado.'))
                     
        boletos_id=self.search(cr,uid,[('producto_id','=',vals['producto_id'])],limit=1,order='id desc',context=context)
        boleto=self.browse(cr,uid,boletos_id,context=context)
        if vals['secuencia']==False and vals['ultimo_val']>0 and vals['prefijo']!=boleto['prefijo']:
            raise osv.except_osv(
                                ('Error de prefijo'),
                                ('El prefijo no existe.'))
        inventario_boleto_val=[]
        inventario_boleto_obj=self.pool.get('ip.inventario.boletos')
        inventario_boleto_id=inventario_boleto_obj.search(cr,uid,[('prefijo','=',vals['prefijo']),('producto_id','=',vals['producto_id'])])
        if len(inventario_boleto_id)==0:
            inventario_boleto_val={
                'producto_id':vals['producto_id'],
                'prefijo':vals['prefijo'],
                'existente':vals['cantidad']
                }
            inventario_boleto_obj.create(cr, uid, inventario_boleto_val, context=context)
        else:
            if vals['cantidad']<=0:
                raise osv.except_osv(
                        ('Error de cantidad'),
                        ('La cantidad no puede ser menor a uno.'))
            else:
                inventario_boleto_data=inventario_boleto_obj.browse(cr,uid,inventario_boleto_id)
                inventario_boleto_val={
                    'existente':vals['cantidad']+inventario_boleto_data['existente'],
                    }
                inventario_boleto_obj.write(cr, uid,inventario_boleto_id, inventario_boleto_val)
       
        generado_id=self.search(cr,uid,[('producto_id','=',vals['producto_id']),('state','=','borrador')],context=context)
        generado_data=self.browse(cr,uid,generado_id,context=context)
        for dato in generado_data:
            self.write(cr, uid, dato.id, {'state': 'generado'},context=context)
        return super(stock_boletos, self).create(cr, uid, vals, context=context)
     
        
class inventerio_boleto(osv.osv):
    _name='ip.inventario.boletos'
    
    _columns = {
        'producto_id':fields.many2one(
                    'ip.boletos',
                    'Boleto'),
        'prefijo':fields.char(
                    'Prefijo', 
                    help="Este es el prefijo del boleto a asignar.",
                    required=True),
        
        'existente':fields.integer(
                    'Boletos Asignados',
                    readonly=False,
                help='Esta es la cantidad total de boletos en inventario'),
            }
        
        

        
   
        
      
