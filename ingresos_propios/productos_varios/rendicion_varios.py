# -*- coding: utf-8 -*-
##############################################################################
#'author': 'Jeison Pernía (Comunidad Bachaco.ve)',

#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import fields, osv
from openerp.tools.translate import _
from datetime import datetime, date, time, timedelta
import time
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT


class account_tax(osv.osv):
    _inherit='account.tax'
    
    _columns = {
        'taxes_id': fields.many2many('ip.rendicion.varios.line', 'rendicion_order_tax', 'taxe_id','rendicion_tax_id', 'Impuestos', readonly=True, states={'draft': [('readonly', False)]}),
    }

class rendicion_productos_varios(osv.Model):
    _name = "ip.rendicion.varios"
    _inherit = ['mail.thread']
    id_filter=[]
    
    def _amount_line_tax(self, cr, uid, line, context=None):
        val = 0.0
        for c in self.pool.get('account.tax').compute_all(cr, uid, line.taxe_id, line.price_unit * (1-(line.discount or 0.0)/100.0), line.product_uom_qty, line.product_id, line.varios_id.partner_id)['taxes']:
            val += c.get('amount', 0.0)
        return val
    
    def _amount_all_wrapper(self, cr, uid, ids, field_name, arg, context=None):
        """ Wrapper because of direct method passing as parameter for function fields """
        return self._amount_all(cr, uid, ids, field_name, arg, context=context)
    
    def _amount_all(self, cr, uid, ids, field_name, arg, context=None):
        cur_obj = self.pool.get('res.currency')
        res = {}
        for order in self.browse(cr, uid, ids, context=context):
            res[order.id] = {
                'sub_total': 0.0,
                'amount_tax': 0.0,
                'amount_total': 0.0,
            }
            val = val1 = 0.0
            cur = order.pricelist_id.currency_id
            for line in order.rendicion_varios_line:
                val1 += line.price_subtotal
                val += self._amount_line_tax(cr, uid, line, context=context)
            res[order.id]['amount_tax'] = cur_obj.round(cr, uid, cur, val)
            res[order.id]['sub_total'] = cur_obj.round(cr, uid, cur, val1)
            res[order.id]['amount_total'] = res[order.id]['sub_total'] + res[order.id]['amount_tax']
        return res
    
    def _get_order(self, cr, uid, ids, context=None):
        result = {}
        for line in self.pool.get('ip.rendicion.varios.line').browse(cr, uid, ids, context=context):
            result[line.varios_id.id] = True
        return result.keys()
    
    def verificar_pago(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        records=self.browse(cr,uid,ids)
        account_invoice_obj=self.pool.get('account.invoice')
        for r in records:
            if not r.state=='done':
                if r.acccount_invoice_id:
                    for account_invoice in account_invoice_obj.browse(cr,uid,[r.acccount_invoice_id]):
                        if account_invoice.state=='paid':
                            self.write(cr, uid, ids, {'state':'paid'},context=context)
                            res[r.id]=1
        return res
    
    def _get_default_company(self, cr, uid, context=None):
            company_id = self.pool.get('res.users')._get_company(cr, uid, context=context)
            if not company_id:
                raise osv.except_osv(_('Error!'), _('There is no default company for the current user!'))
            return company_id
    
    
    _columns = {
        'parque_id':fields.many2one('res.partner', 'Parque', readonly=True, required=True, states={'draft':[('readonly', False)]}),
        'partner_id':fields.many2one('res.partner', 'Cliente', readonly=True, required=True, states={'draft':[('readonly', False)]}),
        'pricelist_id':fields.many2one('product.pricelist', 'Price List', required=True, readonly=True, states={'draft':[('readonly', False)]},),
        'partner_invoice_id':fields.many2one('res.partner', 'Invoice Address', readonly=True, states={'draft':[('readonly', False)]}, help="Invoice address for current reservation. "),
        'partner_order_id':fields.many2one('res.partner', 'Ordering Contact', readonly=True, states={'draft':[('readonly', False)]}, help="The name and address of the contact that requested the order or quotation."),
        'partner_shipping_id':fields.many2one('res.partner', 'Delivery Address', readonly=True, states={'draft':[('readonly', False)]}, help="Delivery address for current reservation. "),
        'date_order':fields.datetime('Fecha de rendición', required=True, readonly=True, states={'draft':[('readonly', False)]}),
        'note': fields.text('Términos y condiciones'),
        
        
        'sub_total': fields.function(_amount_all_wrapper,  string='Sub-Total',
            store={
                'ip.rendicion.varios': (lambda self, cr, uid, ids, c={}: ids, ['rendicion_varios_line'], 10),
                'ip.rendicion.varios.line': (_get_order, ['price_unit', 'taxe_id', 'discount', 'product_uom_qty'], 10),
            },multi='sums', help="Sub-Total de la rendición."),
        'amount_tax': fields.function(_amount_all_wrapper,  string='Impuestos',
            store={
                'ip.rendicion.varios': (lambda self, cr, uid, ids, c={}: ids, ['rendicion_varios_line'], 10),
                'ip.rendicion.varios.line': (_get_order, ['price_unit', 'taxe_id', 'discount', 'product_uom_qty'], 10),
            },multi='sums', help="Total de impuestos."),
        'amount_total': fields.function(_amount_all_wrapper,  string='Total',
            store={
                'ip.rendicion.varios': (lambda self, cr, uid, ids, c={}: ids, ['rendicion_varios_line'], 10),
                'ip.rendicion.varios.line': (_get_order, ['price_unit', 'taxe_id', 'discount', 'product_uom_qty'], 10),
            },multi='sums', help="Total de la rendición."),
        'state': fields.selection([('draft', 'Borrador'), ('confirm', 'Confirmado'),('invoiced', 'Facturado'),('paid', 'Pagado'), ('cancel', 'Cancelado'), ('done', 'Rendido')], 'Estado', readonly=True),
        'currency_id': fields.related('pricelist_id', 'currency_id', type="many2one", relation="res.currency", string="Currency", readonly=True, required=True),
        'user_id': fields.many2one('res.users', 'Usuario', states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, select=True, track_visibility='onchange'),
        'acccount_invoice_id':fields.integer('Id de la factura',readonly=True,),
        'rendicion_varios_line':fields.one2many('ip.rendicion.varios.line','varios_id', 'Rendir Producto', help='Detalles del producto a rendir.'),
        'verificar_pago':fields.function(verificar_pago,int='float',string='Verificar Pago'),
        'company_id': fields.many2one('res.company', 'Company'),
        'fiscal_position': fields.many2one('account.fiscal.position', 'Fiscal Position'),
       
        
    }
    
    
    _defaults = {
        'state': lambda *a: 'draft',
        'date_order': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),
        'user_id': lambda obj, cr, uid, context: uid,
        'company_id': _get_default_company,
    }
    
   
    def onchange_fiscal_position(self, cr, uid, ids, fiscal_position, order_lines, context=None):
        '''Update taxes of order lines for each line where a product is defined

        :param list ids: not used
        :param int fiscal_position: sale order fiscal position
        :param list order_lines: command list for one2many write method
        '''
        order_line = []
        fiscal_obj = self.pool.get('account.fiscal.position')
        product_obj = self.pool.get('product.product')
        line_obj = self.pool.get('sale.order.line')

        fpos = False
        if fiscal_position:
            fpos = fiscal_obj.browse(cr, uid, fiscal_position, context=context)
        
        for line in order_lines:
            # create    (0, 0,  { fields })
            # update    (1, ID, { fields })
            if line[0] in [0, 1]:
                prod = None
                if line[2].get('product_id'):
                    prod = product_obj.browse(cr, uid, line[2]['product_id'], context=context)
                elif line[1]:
                    prod =  line_obj.browse(cr, uid, line[1], context=context).product_id
                if prod and prod.taxes_id:
                    line[2]['tax_id'] = [[6, 0, fiscal_obj.map_tax(cr, uid, fpos, prod.taxes_id)]]
                order_line.append(line)

            # link      (4, ID)
            # link all  (6, 0, IDS)
            elif line[0] in [4, 6]:
                line_ids = line[0] == 4 and [line[1]] or line[2]
                for line_id in line_ids:
                    prod = line_obj.browse(cr, uid, line_id, context=context).product_id
                    if prod and prod.taxes_id:
                        order_line.append([1, line_id, {'tax_id': [[6, 0, fiscal_obj.map_tax(cr, uid, fpos, prod.taxes_id)]]}])
                    else:
                        order_line.append([4, line_id])
            else:
                order_line.append(line)
        return {'value': {'order_line': order_line}}
        
    def onchange_delivery_id(self, cr, uid, ids, company_id, partner_id, delivery_id, fiscal_position, context=None):
        r = {'value': {}}
        if not fiscal_position:
            if not company_id:
                company_id = self._get_default_company(cr, uid, context=context)
            fiscal_position = self.pool['account.fiscal.position'].get_fiscal_position(cr, uid, company_id, partner_id, delivery_id, context=context)
            if fiscal_position:
                r['value']['fiscal_position'] = fiscal_position
        return r
        
        
    def onchange_pricelist_id(self, cr, uid, ids, pricelist_id, rendicion_varios_line, context=None):
        context = context or {}
        if not pricelist_id:
            return {}
        value = {
            'currency_id': self.pool.get('product.pricelist').browse(cr, uid, pricelist_id, context=context).currency_id.id
        }
        if not rendicion_varios_line or rendicion_varios_line == [(6, 0, [])]:
            return {'value': value}
        warning = {
            'title': _('Pricelist Warning!'),
            'message' : _('If you change the pricelist of this order (and eventually the currency), prices of existing order lines will not be updated.')
        }
        return {'warning': warning, 'value': value}
        
    def onchange_partner_id(self, cr, uid, ids, partner_id):
        if not partner_id:
            return {'value':{'partner_invoice_id': False, 'partner_shipping_id':False, 'partner_order_id':False}}
        partner_obj = self.pool.get('res.partner')
        addr = partner_obj.address_get(cr, uid, [partner_id], ['delivery', 'invoice', 'contact'])
        pricelist = partner_obj.browse(cr, uid, partner_id).property_product_pricelist.id
        return {'value':{'partner_invoice_id': addr['invoice'], 'partner_order_id':addr['contact'], 'partner_shipping_id':addr['delivery'], 'pricelist_id': pricelist,'rendicion_varios_line':''}}
        
        
        
    def button_dummy(self, cr, uid, ids, context=None):
        return True

    def draft_rendicion(self,cr,uid,ids):
        self.write(cr, uid, ids, {'state':'draft'})
        return True
        
    def confirmed_rendicion(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'confirm'},context=context)
        return True
        
    def cancel_rendicion(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'cancel'},context=context)
        return True
        
    def rendicion_terminada(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'done'},context=context)
        return True
    
    
    
    def rendicion_pagar(self, cr, uid, ids, context=None):
        account_invoice_obj=self.pool.get('account.invoice')
        account_line_obj=self.pool.get('account.invoice.line')
        account_obj=self.pool.get('account.account')
        #~ Realizamos un search para obtener los ids con las condiciones dadas dentro del mismo
        account_ids=account_obj.search(cr, 
                                        uid, 
                                        [('code', '=',1122001),
                                         ('name','=','CUENTAS POR COBRAR CLIENTES'),
                                        ])
        #~ a los ids del search le hacemos un browse para obtener los datos especificos de esa busqueda
        account_data=account_obj.browse(cr,uid,account_ids, context=context)
        # Realizamos un search para obtener los ids con las condiciones dadas dentro del mismo
        account_line_ids=account_obj.search(cr, 
                                        uid, 
                                        [('code', '=',5111002),
                                         ('name','=','VENTAS NACIONALES AL DETAL'),
                                        ])
        # Realizamos un browse para obtener los valores del search antes realizado
        account_line_data=account_obj.browse(cr,uid,account_line_ids, context=context)
        for rendicion in self.browse(cr, uid, ids, context=context):
            account_invoice_vals=[]
            account_line_vals=[]
            for line in rendicion.rendicion_varios_line:
                tax= [t.id for t in line.taxe_id]
                #~ Aqui Adicionamos la variable que contendra los valores de account invoiced line por cada servicio
                account_line_vals.append(list((0,False,{
                    'uos_id':1, 
                    'account_id': account_line_data.id, 
                    'price_unit': line.price_unit, 
                    'quantity': line.product_uom_qty,
                    'invoice_line_tax_id': [[6, False, [tax[0]]]], 
                    'product_id': line.product_id and line.product_id.id, 
                    'name': line.name, 
                    'account_analytic_id': False, 
                    })))
               
             #~ Aqui llenamos una variable que contendra los valores de account invoiced
            account_invoice_vals={
                #~ 'name':reservation['reservation_no'],
                #~ 'reference':reservation['reservation_no'],
                'account_id':account_data.id,
                'partner_id':rendicion.partner_id.id,
                'date_due':date.today(),
                'user_id':uid,
                'amount_total':rendicion['amount_total'],
                'amount_untaxed':rendicion['sub_total'],
                'isawning':True,
                }
            
            # Aqui actualizamos los valores que trae esta variable y le pasamos en el atributo invoice_line los valores adicionados 
            account_invoice_vals.update({'invoice_line': account_line_vals})
            # Mediante esta variable que inicializamos al comienzo llamos al metodo para crear la factura
            acccount_invoice_id=account_invoice_obj.create(cr, uid, account_invoice_vals, context=context)
            #~ con esto manipulo el workflow de account invoice para validar la factura 
            account_invoice_obj.signal_workflow(cr, uid, [acccount_invoice_id], 'invoice_open')
            #~ con esto pulso el boton de registrar pago y el por defecto me devuelve la vista de cancelar la 
            #~ factura
            vista_pago=account_invoice_obj.invoice_pay_customer(cr,uid,[acccount_invoice_id])
            self.write(cr, uid, ids, {'state':'invoiced','acccount_invoice_id':acccount_invoice_id},context=context)
            return vista_pago
    
    
    def pagar_rendicion(self, cr, uid, ids, context=None):
        account_invoice_obj=self.pool.get('account.invoice')
        for rendicion in self.browse(cr, uid, ids, context=context):
                for account_invoice in account_invoice_obj.browse(cr,uid,[rendicion.acccount_invoice_id]):
                    if not account_invoice.state=='paid':
                        vista_pago=account_invoice_obj.invoice_pay_customer(cr,uid,[rendicion.acccount_invoice_id]) 
                        return vista_pago
        return True
        
    def imprimir_rendicion(self, cr, uid, ids, context=None):
        for rendicion in self.browse(cr,uid,ids,context=context):
                acccount_invoice_id=rendicion.acccount_invoice_id
        return self.pool['report'].get_action(cr, uid, [acccount_invoice_id], 'account.report_invoice', context=context)
        
    
    def create(self,cr,uid,vals,context=None):
        
        cr.execute("select product_id from product_varios_rela where partner_id=%s",(vals['partner_id'],))
       
        for i in cr.fetchall():
            
            producto_varios_obj = self.pool.get('ip.productos.varios')
            producto_varios_ids=producto_varios_obj.search(cr, uid, [('id','=',i)],)
            producto_varios_obj.write(cr, uid, producto_varios_ids,{'producto_activo':False})
        return super(rendicion_productos_varios, self).create(cr, uid, vals, context=context)


class rendicion_varios_line(osv.Model):
    _name = "ip.rendicion.varios.line"
    _rec_name="product_id"
    
    
    def sub_total(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        tax_obj = self.pool.get('account.tax')
        cur_obj = self.pool.get('res.currency')
        res = {}
        if context is None:
            context = {}
        for line in self.browse(cr, uid, ids, context=context):
           
            price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
            res[line.id] = price*line.product_uom_qty
        return res
    def cargar_partner(self, cr, uid, ids, field_name, arg, context=None):
        res={}
        return res
    
    _columns = {
        'partner_id':fields.many2one('res.partner', 'Parque', readonly=True, required=True, states={'draft':[('readonly', False)]}),
        'varios_id':fields.many2one('ip.rendicion.varios', 'Rendir Productos'),
        'product_id': fields.many2one('ip.productos.varios', 'Producto',  readonly=True, states={'draft': [('readonly', False)]}, ondelete='restrict'),
        'name': fields.text('Descripcion', required=True, readonly=True, states={'draft': [('readonly', False)]}),
        'product_uom_qty': fields.float('Cantidad', required=True, readonly=True, states={'draft': [('readonly', False)]}),
        'price_unit': fields.float('Precio Unitario', required=True,  readonly=True, states={'draft': [('readonly', False)]}),
        'taxe_id': fields.many2many('account.tax', 'rendicion_order_tax', 'rendicion_tax_id', 'taxe_id', 'Impuestos', readonly=True, states={'draft': [('readonly', False)]}),
        'price_subtotal': fields.function(sub_total, string='Subtotal',),
        'discount': fields.float('Descuento (%)', readonly=True, states={'draft': [('readonly', False)]}),
        'state': fields.selection(
                [('cancel', 'Cancelled'),('draft', 'Draft'),('confirmed', 'Confirmed'),('exception', 'Exception'),('done', 'Done')],
                'Status', required=True, readonly=True, copy=False,),
    }
    
    
    
    _defaults = {
        'state': 'draft',
        'price_unit': 0.0,
        'product_uom_qty': 1,
        'product_uos_qty': 1,
    }
    
    
    def product_id_change(self, cr, uid, ids, product_id, parque_id, partner_id,context=None):
        if not partner_id:
            raise osv.except_osv(('Cliente no definido!'), ('Seleccione un cliente.'))
        if not parque_id:
            raise osv.except_osv(('Parque no definido!'), ('Seleccione un parque.'))
        res={}
        
        id_product=[]
        registro_parque_obj=self.pool.get('registro_parque')
        registro_parque_id=registro_parque_obj.search(cr,uid,[('partner_id','=',parque_id)],context=context)
        registro_parque_datos=registro_parque_obj.browse(cr,uid,registro_parque_id,context=context)
        
        cr.execute("select product_id from product_varios_rela where partner_id=%s",(str(registro_parque_datos['id']),))
        
        for i in cr.fetchall():
            id_product.append(i[0])
        domain = {'product_id': [('id', '=', list(id_product))]}
       
       
        if product_id:
            productos_varios_obj=self.pool.get('ip.productos.varios')
            productos_varios_id=productos_varios_obj.search(cr,uid,[('id','=',product_id)],context=context)
            productos_varios_datos=productos_varios_obj.browse(cr,uid,productos_varios_id,context=context)
            
            product_product_obj=self.pool.get('product.product')
            product_product_id=product_product_obj.search(cr,uid,[('id','=',int(productos_varios_datos['product_varios_id']))],context=context)
            product_product_datos=product_product_obj.browse(cr,uid,product_product_id,context=context)
            
            res={
                'price_unit': product_product_datos['list_price'],
                'taxe_id':product_product_datos['taxes_id'],
                'name':product_product_datos['name'],
                'partner_id':partner_id,}
                
        return {'value':res,'domain': domain}
    

    
    
    
