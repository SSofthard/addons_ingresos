#~ # -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !

from lxml import etree
import math
import pytz
import urlparse


import openerp
from openerp.osv.expression import get_unaccent_wrapper

from openerp import tools, api
from openerp.osv import fields, osv
from openerp.tools.translate import _
from datetime import datetime, date, time, timedelta
from dateutil.relativedelta import *
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT



class config_punto_cuenta_telecom(osv.osv):
    
    _name="config_punto_cuenta_telecom"
    
    def function_calculo_pago(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        for r in self.browse(cr,uid,ids):
            res[r.id]=r.cantidad_unidad_tributaria*r.valor_unidad_tributaria
        return res
        
    def calculo(self,cr,uid,ids,cantidad_unidad_tributaria,valor_unidad_tributaria,context=None):
        
        res={}
        if cantidad_unidad_tributaria > 0:
            resultado=cantidad_unidad_tributaria*valor_unidad_tributaria
            res={'total_a_cancelar':resultado}
        return {'value': res}

   
    def get_default_unidad_trib(self, cr, uid,fields,context=None):
        account_config_obj=self.pool.get('account.config.settings')
        res = account_config_obj.get_default_ut(cr, uid,fields)
        return res['unidad_tributaria']    
        
    def limpiar_selector(self, cr, uid,ids,tipo,context=None):
        res={}
        if tipo=="tarifas_propuestas":
                res= {
                'alcance_id':'',
             }
        return{'value':res}  
    
    
         

        
    _columns={
        'name':fields.char('Nombre',size=100, required=False, help="Introduzca el nombre"),
        'tarifas_propuestas_id':fields.many2one('tarifas_propuestas','Tarifa',help=' Relacion de Alcance con tarifas propuestas '),
        'alcance_id':fields.many2one('alcance','Alcance', help=' Nombre del Tipo de Alcance '),
        'infraestructura_id':fields.many2one('infraestructura','Infraestructura',help='Seleccione una Infraestructura'),
        'cantidad_unidad_tributaria':fields.float('Cantidad Unidad Tributaria', help="Cantidad Unidad Tributaria"),
        'valor_unidad_tributaria':fields.float('Valor Unidad Tributaria', help="Valor Unidad Tributaria"),
        'total_a_cancelar':fields.function(function_calculo_pago ,'Total a Cancelar en BsF.', type='float', readonly=True, store=True, help='Total a cancelar....'),
    }
    
    _defaults = {
        'valor_unidad_tributaria':get_default_unidad_trib,
    }
    
    def concatenar_nombre(self, cr, uid, ids, context=None):
        nombre={}
        for r in self.browse(cr,uid,ids):
            nombre=str(r.infraestructura_id.name+'-'+r.tarifas_propuestas_id.codigo+'-'+r.alcance_id.codigo)
        return self.write(cr, uid, ids, {'name': nombre})
    
    _constraints = [
        (concatenar_nombre, ' ', ['tarifas_propuestas_id']), 
    ]
    


class concesiones(osv.osv):
    _inherit = 'concesiones'
   
    _columns = {
        'canon_conv_id': fields.many2one('canon_convenio_telecomunicacion', 'Canon Convenio' ),
    }

class punto_cuenta(osv.osv):
    _inherit='punto.cuenta'
    
    _columns={
        'canon_conv_id':fields.many2one('canon_convenio_telecomunicacion', 'Canon Convenio')
    
    }
        
    def generar_contrato_telecom(self,cr,uid,ids,context=None):
        for i in self.browse(cr,uid,ids,context=context):
            canon_conv_id=i.canon_conv_id
            partner_id=i.canon_conv_id.partner_id
            registro_parque_id=1
            total=i.canon_conv_id.total_canon_unidad_tributaria
            punto_cuenta_id=i.id
        
        return {
            'name': ('concesiones'),
            'res_model': 'concesiones',
            'type': 'ir.actions.act_window',
            'view_id': False,
            'view_mode': 'form,tree',
            'view_type': 'form',
            'limit': 80,
            'context': "{   'default_canon_conv_id': %d,\
                            'default_punto_cuenta_id':%d,\
                            'default_partner_id':%d,\
                            'default_registro_parque_id':%d,\
                            'default_pago_mensual':%f,\
                            'default_control_conc':False,\
                            'default_tipo_contrato':'convenio',\
                            }" % (canon_conv_id, punto_cuenta_id,partner_id,registro_parque_id,total),
        }
    
    
    
class canon_convenio_telecomunicacion(osv.osv):
    
    _name="canon_convenio_telecomunicacion"
    _description = "Hola mundo....."
   
    def get_default_unidad_trib(self, cr, uid,fields,context=None):
        account_config_obj=self.pool.get('account.config.settings')
        res = account_config_obj.get_default_ut(cr, uid,fields)
        return res['unidad_tributaria']    
    
    def function_unidad_trib(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        account_config_obj=self.pool.get('account.config.settings')
        config = account_config_obj.get_default_ut(cr, uid,fields)
        for id in ids:
            res[id]=config['unidad_tributaria']
        return res  
     
  
        
    _columns={
        'name':fields.char('Numero de canon',readonly=True,help='Esta es el numero de canon generado'),
        'partner_id':fields.many2one('res.partner','Empresa', required=True, help='Seleccione una Empresa'),
        'state': fields.selection([('draft', 'Borrador'), ('confirm', 'Confirmado'),('cancel', 'Cancelado'),('eliminar', 'Eliminado'),('aprobado_pc', 'Gestionado por punto de cuenta'), ], 'Estado', readonly=True),
        'valor_unidad_tributaria':fields.function(function_unidad_trib,'Unidad Tributaria', store=True , type="float", readonly=True, help='Monto de la Unidad Tributaria'),
        'inventario_infraestructura_ids':fields.one2many('inventario_infraestructura','canon_convenio_telecom_id','Inventario Infraestructura',help='Inventario Infraestructura'),
        'canon_exoneracion_otorgada_ids':fields.one2many('canon_exoneracion_otorgada','canon_convenio_telecomunicacion_id','Canon Exoneracion',help='Seleccione un Canon'),
        'total_parque_estacion_ids':fields.one2many('total_parque_estacion','canon_convenio_telecom_id','Total',help='Total'),
        'parque_total_ids':fields.one2many('parque_total','canon_convenio_telecom_id','Total',help='Total'),
        'total_infra_ids':fields.one2many('total_infra','canon_convenio_telecom_id','Total',help='Total por infraestructura'),
        'total_canon_unidad_tributaria':fields.float('Total', help="Total Canon en Unidades Tributarias"),
        'total_canon_en_Bs':fields.float('Total Bs', type="float", readonly=True, help="Total Canon en Bolivares"),
    }
    
    _defaults = {
        'valor_unidad_tributaria':get_default_unidad_trib,
        'state': '',
    }
    
    def calculo_canon_UT_total(self, cr, uid, ids, context=None):
        res={}
        
        for i in self.browse(cr,uid,ids,context=context):
            suma=0.00
            for r in i.total_parque_estacion_ids:
                print r.total
                suma+= float(r.total)
                canon_bs=suma*(i.valor_unidad_tributaria)
                
                res={

                    'total_canon_unidad_tributaria':suma,
                    'total_canon_en_Bs':canon_bs,
                }
        return self.write(cr,uid,ids,res,context=context)
        
    
  
    
    def confirmar_canon(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'confirm'},context=context)
        return True
        
    def cancelar_canon(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'cancel'},context=context)
        return True
        
    def eliminar_canon (self, cr, uid, ids, context=None):
        for c in self.browse(cr,uid,ids,context=context):
            self.write(cr, uid, ids, {'active': False,'state':'eliminar'},context=context)
        return True
    
    def generar_punto_cuenta_telecom(self,cr,uid,ids,context=None):
        for i in self.browse(cr,uid,ids,context=context):
            partner_id=i.partner_id
            print i.total_canon_en_Bs
            print i.total_canon_en_Bs
            print i.total_canon_en_Bs
            monto=i.total_canon_en_Bs
            id_canon=i.id
        
        return {
            'name': ('Punto de Cuenta'),
            'res_model': 'punto.cuenta',
            'type': 'ir.actions.act_window',
            'view_id': False,
            'view_mode': 'form,tree',
            'view_type': 'form',
            'limit': 80,
            'context': "{'default_partner_id': %d,'default_monto_numero': %f,'default_punto':False, 'default_canon_conv_id': %d}" % (partner_id, monto, id_canon),
        }
    
                    
    def create(self,cr,uid,values,context=None):
        ut_canon=self.get_default_unidad_trib(cr, uid,fields)
        for i in values['inventario_infraestructura_ids']:
            agregado=True
            agregado_pt=True
            agregado_inf=True
            for ife in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[i[2]['config_puntocuenta_telecom_id']]):
                cantidad_unidad_tributaria=ife.cantidad_unidad_tributaria
                
            for tpe in values['total_parque_estacion_ids']:
                if tpe[2]['parque_id']==i[2]['parque_id'] and tpe[2]['estacion_id']==i[2]['estacion_id']:
                    #~ print tpe[2]['total']
                    tpe[2]['total']+=(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria
                    #~ print tpe[2]['total']
                    agregado=False
            for pt in values['parque_total_ids']:
                if pt[2]['parque_id']==i[2]['parque_id']:
                    pt[2]['totalidad']+=(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria
                    agregado_pt=False
            for inf in values['total_infra_ids']:
                if inf[2]['infraestructura_id']==i[2]['config_puntocuenta_telecom_id']:
                    inf[2]['infra_total']+=(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])
                    inf[2]['total_por_infra']+=(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria
                    inf[2]['total_infra_bs']+=((i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria)*ut_canon
                    agregado_inf=False
            if agregado==True:
                values['total_parque_estacion_ids'].append([0,False,{
                                                                        'parque_id': i[2]['parque_id'], 
                                                                        'estacion_id':i[2]['estacion_id'],
                                                                        'total':(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                        'canon_convenio_telecom_id': False}])
            if agregado_pt==True:
                values['parque_total_ids'].append([0,False,{
                                                                        'parque_id': i[2]['parque_id'], 
                                                                        'totalidad':(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                        'canon_convenio_telecom_id': False}])
            if agregado_inf==True:
                values['total_infra_ids'].append([0,False,{
                                                                        'infraestructura_id': i[2]['config_puntocuenta_telecom_id'],
                                                                        'ut_por_infra': i[2]['valor_ut_por_infra'], 
                                                                        'infra_total':(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada']),
                                                                        'total_por_infra':(i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                        'total_infra_bs':((i[2]['cantidad_total_infra']-i[2]['cantidad_exonerada'])*cantidad_unidad_tributaria)*ut_canon,
                                                                        'canon_convenio_telecom_id': False}])
            
        seq=self.pool.get('ir.sequence').get(cr,uid,'canon_convenio_telecomunicacion')
        values.update({
            'name':seq,
            })
        canon_id=super(canon_convenio_telecomunicacion,self).create(cr,uid,values,context=context)
        canon_data=self.browse(cr,uid,[canon_id])
        #~ print seq
        self.write(cr, uid, [canon_id], {'state':'draft'},context=context)
        self.write(cr,uid,[canon_id],{'name':seq+'-'+canon_data.partner_id.name})
                                                               
        return canon_id

        
        
    def modificar_parque_estacion(self,cr,uid,vals,context=None):
        conf_punt_tel_ids=[]
        total_parque_estacion_data=[]
        total_parque_estacion_create=[]
        for ii in vals['inventario_infraestructura_ids']:
                if  ii[0]==4:
                    conf_punt_tel_ids.append(ii[1])
                if ii[0]==0:
                    for ife in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ii[2]['config_puntocuenta_telecom_id']]):
                        cantidad_unidad_tributaria=ife.cantidad_unidad_tributaria
                    total_parque_estacion_data.append([0,False,{        'parque_id': ii[2]['parque_id'], 
                                                                        'estacion_id':ii[2]['estacion_id'],
                                                                        'total':(ii[2]['cantidad_total_infra']-ii[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                        'canon_convenio_telecom_id': False}])
        for ife in self.pool.get('inventario_infraestructura').browse(cr,uid,conf_punt_tel_ids):
            for cpct in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ife.config_puntocuenta_telecom_id.id]):
                cantidad_unidad_tributaria=cpct.cantidad_unidad_tributaria
            total_parque_estacion_data.append([0,False,{         'parque_id': ife.parque_id.id, 
                                                                            'estacion_id':ife.estacion_id.id,
                                                                            'total':(ife.cantidad_total_infra-ife.cantidad_exonerada)*cantidad_unidad_tributaria,
                                                                            'canon_convenio_telecom_id': False}])
        for tped in total_parque_estacion_data:
            agregado=True
            for tpe in total_parque_estacion_create:
                if tpe['parque_id']==tped[2]['parque_id'] and tpe['estacion_id']==tped[2]['estacion_id']:
                    tpe['total']+=tped[2]['total']
                    agregado=False
            if agregado==True:
                total_parque_estacion_create.append({
                                                'parque_id': tped[2]['parque_id'], 
                                                'estacion_id':tped[2]['estacion_id'],
                                                'total':tped[2]['total'],
                                                'canon_convenio_telecom_id': False})
        index = 0
        tpe_ids=[]
        for datos in total_parque_estacion_create:
            tpe_ids.append(index)
            tpe_ids[index]=self.pool.get('total_parque_estacion').create(cr,uid,datos)
            index+=1
        return tpe_ids
        
        
    def modificar_parque_total(self,cr,uid,vals,context=None):
        conf_punt_tel_ids=[]
        parque_total_data=[]
        parque_total_create=[]
        for ii in vals['inventario_infraestructura_ids']:
                if ii[0]==4:
                    conf_punt_tel_ids.append(ii[1])
                if ii[0]==0:
                    for ife in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ii[2]['config_puntocuenta_telecom_id']]):
                        cantidad_unidad_tributaria=ife.cantidad_unidad_tributaria
                    parque_total_data.append([0,False,{        'parque_id': ii[2]['parque_id'], 
                                                                'totalidad':(ii[2]['cantidad_total_infra']-ii[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                'canon_convenio_telecom_id': False}])
        for ife in self.pool.get('inventario_infraestructura').browse(cr,uid,conf_punt_tel_ids):
            for cpct in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ife.config_puntocuenta_telecom_id.id]):
                cantidad_unidad_tributaria=cpct.cantidad_unidad_tributaria
            parque_total_data.append([0,False,{         'parque_id': ife.parque_id.id, 
                                                        'totalidad':(ife.cantidad_total_infra-ife.cantidad_exonerada)*cantidad_unidad_tributaria,
                                                        'canon_convenio_telecom_id': False}])
        for tped in parque_total_data:
            agregado=True
            for tpe in parque_total_create:
                if tpe['parque_id']==tped[2]['parque_id']:
                    tpe['totalidad']+=tped[2]['totalidad']
                    agregado=False
            if agregado==True:
                parque_total_create.append({
                                                'parque_id': tped[2]['parque_id'], 
                                                'totalidad':tped[2]['totalidad'],
                                                'canon_convenio_telecom_id': False})
        index = 0
        tpe_ids=[]
        for datos in parque_total_create:
            tpe_ids.append(index)
            tpe_ids[index]=self.pool.get('parque_total').create(cr,uid,datos)
            index+=1
        return tpe_ids
    
    def modificar_total_infra(self,cr,uid,vals,context=None):
        ut_canon=self.get_default_unidad_trib(cr, uid,fields)
        conf_punt_tel_ids=[]
        total_infra_data=[]
        total_infra_create=[]
        for ii in vals['inventario_infraestructura_ids']:
                if ii[0]==4:
                    conf_punt_tel_ids.append(ii[1])
                if ii[0]==0:
                    for ife in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ii[2]['config_puntocuenta_telecom_id']]):
                        cantidad_unidad_tributaria=ife.cantidad_unidad_tributaria
                    total_infra_data.append([0,False,{                  'infraestructura_id': ii[2]['config_puntocuenta_telecom_id'],
                                                                        'ut_por_infra': ii[2]['valor_ut_por_infra'], 
                                                                        'infra_total':(ii[2]['cantidad_total_infra']-ii[2]['cantidad_exonerada']),
                                                                        'total_por_infra':(ii[2]['cantidad_total_infra']-ii[2]['cantidad_exonerada'])*cantidad_unidad_tributaria,
                                                                        'total_infra_bs':((ii[2]['cantidad_total_infra']-ii[2]['cantidad_exonerada'])*cantidad_unidad_tributaria)*ut_canon,
                                                                        'canon_convenio_telecom_id': False}])
        for ife in self.pool.get('inventario_infraestructura').browse(cr,uid,conf_punt_tel_ids):
            for cpct in self.pool.get('config_punto_cuenta_telecom').browse(cr,uid,[ife.config_puntocuenta_telecom_id.id]):
                cantidad_unidad_tributaria=cpct.cantidad_unidad_tributaria
            total_infra_data.append([0,False,{         'infraestructura_id': ife.config_puntocuenta_telecom_id.id,
                                                        'ut_por_infra': ife.valor_ut_por_infra, 
                                                        'infra_total':((ife.cantidad_total_infra-ife.cantidad_exonerada)),
                                                        'total_por_infra':(ife.cantidad_total_infra-ife.cantidad_exonerada)*cantidad_unidad_tributaria,
                                                        'total_infra_bs':((ife.cantidad_total_infra-ife.cantidad_exonerada)*cantidad_unidad_tributaria)*ut_canon,
                                                        'canon_convenio_telecom_id': False}])
        for tped in total_infra_data:
            agregado=True
            for tpe in total_infra_create:
                if tpe['infraestructura_id']==tped[2]['infraestructura_id']:
                    tpe['infra_total']+=tped[2]['infra_total']
                    tpe['total_por_infra']+=tped[2]['total_por_infra']
                    tpe['total_infra_bs']+=tped[2]['total_infra_bs']
                    agregado=False
            if agregado==True:
                total_infra_create.append({
                                                'infraestructura_id': tped[2]['infraestructura_id'], 
                                                'ut_por_infra': tped[2]['ut_por_infra'], 
                                                'infra_total': tped[2]['infra_total'], 
                                                'total_por_infra':tped[2]['total_por_infra'],
                                                'total_infra_bs':tped[2]['total_infra_bs'],
                                                'canon_convenio_telecom_id': False})
        index = 0
        tpe_ids=[]
        for datos in total_infra_create:
            tpe_ids.append(index)
            tpe_ids[index]=self.pool.get('total_infra').create(cr,uid,datos)
            index+=1
        return tpe_ids
    
                
    def write(self,cr,uid,ids,vals,context=None):
        if vals.has_key('inventario_infraestructura_ids'):
            vals['total_parque_estacion_ids']=[[6,False,self.modificar_parque_estacion(cr,uid,vals,context=context)]]
            vals['parque_total_ids']=[[6,False,self.modificar_parque_total(cr,uid,vals,context=context)]]
            vals['total_infra_ids']=[[6,False,self.modificar_total_infra(cr,uid,vals,context=context)]]
        return super(canon_convenio_telecomunicacion,self).write(cr, uid, ids, vals, context=context)
        


class inventario_infraestructura(osv.osv):
    
    _name="inventario_infraestructura"
    
    def function_total_infra(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        for r in self.browse(cr,uid,ids):
            res[r.id]=r.cantidad_total_infra-r.cantidad_exonerada
        return res
    
    def calculo_total_infra(self,cr,uid,ids,cantidad_total_infra,cantidad_exonerada,context=None):
        res={}
        if cantidad_total_infra > 0:
            if (cantidad_exonerada <= cantidad_total_infra):
                resultado=cantidad_total_infra-cantidad_exonerada
                res={'total_infraestructura':resultado}
            else:
                res=''
                raise osv.except_osv(
                    ('Error!'),
                    (u'La cantidad exonerada %s no puede\
                     ser mayor a la cantidad Total de infraestructura\
                      %s'% (cantidad_exonerada,cantidad_total_infra)))
                      
        return {'value': res}
    
    def accederUT(self,cr,uid,ids,config_puntocuenta_telecom_id,context=None):
        res={}
        config_pct_obj=self.pool.get('config_punto_cuenta_telecom')
        config_pct_data=config_pct_obj.browse(cr,uid,config_puntocuenta_telecom_id)
        res={'valor_ut_por_infra':config_pct_data.cantidad_unidad_tributaria}
        return {'value': res}
    
    def function_calculo_infra_bs(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        for r in self.browse(cr,uid,ids):
            total_infra=r.cantidad_total_infra-r.cantidad_exonerada
            res[r.id]=float(total_infra)*float(r.valor_ut_por_infra)
        return res
    
    def calculo_infra_bs(self,cr,uid,ids,valor_ut_por_infra,total_infraestructura,context=None):
        res={}
        result=0.00
        result=float(valor_ut_por_infra)*float(total_infraestructura)
        res={'total_infraestructura_bs':result}
        return {'value': res}
    

           
    _columns={
        'parque_id':fields.many2one('registro_parque','Parque', required=True,help='Seleccione el Parque'),
        'estacion_id':fields.many2one('estacion_parques','Estacion Parque', required=True,help=' Nombre de la Estacion Parque '),
        'config_puntocuenta_telecom_id':fields.many2one('config_punto_cuenta_telecom', 'Tarifa Propuesta', required=True,help="Punto de cuenta"),
        'valor_ut_por_infra':fields.float('U.T ', help="Valor Unidad Tributaria por Infraestructura"),
        'cantidad_total_infra':fields.integer('Cantidad Total Infraestructura', required=True,help="Cantidad Total Infraestructura"),
        'cantidad_exonerada':fields.integer('Cantidad Exonerada', help="Cantidad Exonerada"),
        'total_infraestructura':fields.function(function_total_infra, 'Total Infraestructura', type='integer', store=True, help="Cantidad Total Infraestructura"),
        'canon_convenio_telecom_id':fields.many2one('canon_convenio_telecomunicacion','Canon Convenio', help='Seleccione el canon '),
        'total_infraestructura_bs':fields.function(function_calculo_infra_bs, 'Total Inf Bs', type='integer', store=True, help="Cantidad Total Infraestructura en Bs"),


    }
    def filtro_parque_estacion(self,cr,uid,ids,parque_id,tipo,context=None):
        res={}
        if tipo=="registro_parque":
                res= {
                'estacion_id':'',
             }
        estacion_parques_obj=self.pool.get('estacion_parques')
        estacion_parques_id=estacion_parques_obj.search(cr,uid,[('registro_parque_id','=',parque_id)],context=context)
        domain = {'estacion_id': [('id', '=', list(estacion_parques_id))]}
        
        return {'value':res,'domain': domain}    
     #~ 
    #~ def filtro_parque_estacion(self,cr,uid,ids,parque_id,context=None):
        #~ estacion_parques_obj=self.pool.get('estacion_parques')
        #~ estacion_parques_id=estacion_parques_obj.search(cr,uid,[('registro_parque_id','=',parque_id)],context=context)
        #~ domain = {'estacion_id': [('id', '=', list(estacion_parques_id))]}
        #~ return {'domain': domain}
   


class canon_exoneracion_otorgada(osv.osv):
    
    _name="canon_exoneracion_otorgada"
    _rec_name="canon_convenio_telecomunicacion_id"
    
   
    _columns={
        'canon_convenio_telecomunicacion_id':fields.many2one('categoria_exoneracion','Canon Convenio',help='Canon establecido para los Convenio '),
        'categoria_exoneracion_id':fields.many2one('categoria_exoneracion','Categoria exonerada',help='Seleccione una Categoria'),
        'infraestructura_id':fields.many2one('infraestructura','Infraestructura',help='Seleccione una Infraestructura'),
        'cantidad_canon':fields.char('Cantidad Exonerada', help='Cantidad Exonerada'),
        
    }     
        
class categoria_exoneracion(osv.osv):
    
    _name="categoria_exoneracion"
    
    
   
    _columns={
        'name':fields.char('Categoria Exonerada', help='Nombre de la categoria exonerada'),
    }

class total_parque_estacion(osv.osv):
    
    _name="total_parque_estacion"
    
    _columns={
        'parque_id':fields.many2one('registro_parque','Parque', required=True,help='Seleccione el Parque'),
        'estacion_id':fields.many2one('estacion_parques','Estacion Parque', required=True,help=' Nombre de la Estacion Parque '),
        'total':fields.char('Total', help='Total'),
        'canon_convenio_telecom_id':fields.many2one('canon_convenio_telecomunicacion','Canon Convenio', help='Seleccione el canon '),
    } 
    
class parque_total(osv.osv):
    
    _name="parque_total"
    
    _columns={
        'parque_id':fields.many2one('registro_parque','Parque', required=True,help='Seleccione el Parque'),
        'totalidad':fields.char('Total', help='Total Parques'),
        'canon_convenio_telecom_id':fields.many2one('canon_convenio_telecomunicacion','Canon Convenio', help='Seleccione el canon '),
    }

class total_infra(osv.osv):
    
    _name="total_infra"
    _rec_name="infraestructura_id"
    
    _columns={
        'infraestructura_id':fields.many2one('config_punto_cuenta_telecom', 'Infraestructura', required=True,help="Punto de cuenta"),
        'ut_por_infra':fields.float('U.T por Infraestructura', help="Valor Unidad Tributaria por Infraestructura"),
        'infra_total':fields.float('Total Infraestructura', help="Cantidad Total por clase de Infraestructura"),
        'total_por_infra':fields.float('Total U.T', help="Cantidad Total por cada Infraestructura"),
        'total_infra_bs':fields.float('Total Bs', help="Cantidad Total en bolivares por clase infraestructura"),
        'canon_convenio_telecom_id':fields.many2one('canon_convenio_telecomunicacion','Canon Convenio', help='Seleccione el canon '),
    }  

    
