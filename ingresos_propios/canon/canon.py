# -*- coding: utf-8 -*-
##############################################################################
#

##############################################################################
# Generated by the OpenERP plugin for Dia !
from openerp.osv import fields, osv
from datetime import datetime, date, time, timedelta
import time
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT

class canon_concesiones(osv.osv):
     
    _name="ip.canon.concesiones"
    _rec_name="name"
    
    
    def function_unidad_trib(self,cr,uid,ids,field_name,arg,context=None):
        res={}
        account_config_obj=self.pool.get('account.config.settings')
        config = account_config_obj.get_default_ut(cr, uid,fields)
        for id in ids:
            res[id]=config['unidad_tributaria']
        return res 
   
    def get_default_unidad_trib(self, cr, uid,fields,context=None):
        account_config_obj=self.pool.get('account.config.settings')
        res = account_config_obj.get_default_ut(cr, uid,fields)
        return res['unidad_tributaria']
        
    
    def porcentaje_bruto(self,cr,uid,ids,field_name,arg, context=None):
        res={}
        for i in self.browse(cr,uid,ids):
            config_ingresos_brutos_obj=self.pool.get('config_ingresos_brutos')
            config_ingresos_brutos_ids=config_ingresos_brutos_obj.search(cr,uid,[('id','=',int(i.ingresos_brutos_id))],context=context)
            config_ingresos_brutos_datos=config_ingresos_brutos_obj.browse(cr,uid,config_ingresos_brutos_ids,context=context)
            porcentaje=config_ingresos_brutos_datos['porcentaje']*100
            res[i.id]=str(porcentaje)+'%'
        return res
        
    def porcentaje_visitantes(self,cr,uid,ids,field_name,arg, context=None):
        res={}
        for i in self.browse(cr,uid,ids):
            config_captacion_visitantes_obj=self.pool.get('config_captacion_visitantes')
            config_captacion_visitantes_ids=config_captacion_visitantes_obj.search(cr,uid,[('id','=',int(i.captacion_visitantes_id))],context=context)
            config_captacion_visitantes_datos=config_captacion_visitantes_obj.browse(cr,uid,config_captacion_visitantes_ids,context=context)
            porcentaje=config_captacion_visitantes_datos['porcentaje']*100
            res[i.id]=str(porcentaje)+'%'
        return res
   
        
    
    _columns = {
        'name':fields.char('Numero de canon',readonly=True,help='Esta es el numero de canon generado'),
        'partner_id': fields.many2one('res.partner', 'Empresa', states={'draft': [('readonly', True)], 'confirm': [('readonly', True)],'cancel': [('readonly', True)]}, required=True, help='Empresas a las que se les generara el canon'),
        'parque_id': fields.many2one('registro_parque', 'Parque',states={'draft': [('readonly', True)], 'confirm': [('readonly', True)],'cancel': [('readonly', True)]}, required=True, help='Parque'),
        'date_calculo':fields.datetime('Fecha', required=True, readonly=True, states={'draft':[('readonly', False)]}),
        'unidad_tributaria': fields.function(function_unidad_trib,'Unidad Tributaria',  type="float", readonly=True, help='Monto de la Unidad Tributaria'),
        'state': fields.selection([('draft', 'Borrador'), ('confirm', 'Confirmado'),('cancel', 'Cancelado'),('eliminar', 'Eliminado'),('aprobado_pc', 'Gestionado por punto de cuenta'), ], 'Estado', readonly=True),
        
        'ingresos_brutos_id': fields.many2one('config_ingresos_brutos', 'Periodo',  help='Periodos mediante el cual se establecera el porcentaje del canon'),
        'porcentaje_bruto':fields.function(porcentaje_bruto,'Porcentaje',type='char',),
        'monto_ingreso_bruto':fields.integer('Monto del ingreso bruto', help='Monto del ingreso bruto declarado por la empresa'),
        'total_ingreso_bruto':fields.float('Total del ingreso bruto',   help='Total del calculo basado en el ingreso bruto de la empresa'),
        
        'promedio_visitantes_ids':fields.many2many('promedio_visitantes', 'ip_canon_conce_pv', 'canon_conce_id','promedio_visitante_id', 'Población captada'),
        'promedio_poblacion_captada':fields.integer('Promedio'),
        'captacion_visitantes_id': fields.many2one('config_captacion_visitantes', 'Periodo',  help='Periodos mediante el cual se establecera promedio de visitantes'),
        'porcentaje_visitantes':fields.function(porcentaje_visitantes,'Porcentaje',type='char',),
        'canon_producto_id':fields.one2many('ip.canon.concesiones.producto','canon_concesiones_id', 'Productos o servicios', help='Productos o servicios de la empresa.'),       
        'promedio_productos_servicios':fields.integer('Promedio'),
        'total_poblacion_captada':fields.float('Total',   help='Total del calculo basado en la poblacion captada por el parque'),
    
        'cantidad_metros':fields.integer('Cantidad de metros', help='Cantidad de metros ocupados por la empresa'),
        'total_metros_ocupados':fields.float('Total metros ocupados',   help='Total del calculo basado en los metros ocupados por la empresa'),
    
        'total_canon_concesiones':fields.float('Total',   help='Total del calculo del canon por la concesión'),
        'active':fields.boolean('Activo?', help="Iniciar nuevamente una secuencia de boletos"),
    }
    
    _defaults={
        'unidad_tributaria':get_default_unidad_trib,
        'state': '',
        'date_calculo': lambda *a: time.strftime('%Y-%m-%d %H:%M:%S'),
        'active':True,
    }
    
    _order = 'date_calculo desc, id desc'
    
  
    
    def calculo_ingreso_bruto(self, cr, uid, ids, context=None):
        res=[]
        for i in self.browse(cr,uid,ids,context=context):
            config_ingresos_brutos_obj=self.pool.get('config_ingresos_brutos')
            config_ingresos_brutos_ids=config_ingresos_brutos_obj.search(cr,uid,[('id','=',int(i.ingresos_brutos_id))],context=context)
            config_ingresos_brutos_datos=config_ingresos_brutos_obj.browse(cr,uid,config_ingresos_brutos_ids,context=context)
            total_ing_bruto=(i.monto_ingreso_bruto*config_ingresos_brutos_datos['porcentaje'])/i.unidad_tributaria
            if total_ing_bruto>0:
                count=1
            else:
                count=0
            res.append(total_ing_bruto)
            res.append(count)
        return res
        
    def calculo_metros_ocupados(self, cr, uid, ids, context=None):
        res=[]
        for i in self.browse(cr,uid,ids,context=context):
            total_metros_ocupados=(i.cantidad_metros*0.70)/i.unidad_tributaria
            if total_metros_ocupados>0:
                count=1
            else:
                count=0
            res.append(total_metros_ocupados)
            res.append(count)
        return res
        
    def calculo_poblacion_captada(self, cr, uid, ids, context=None):
        res=[]
        for i in self.browse(cr,uid,ids,context=context):
            config_captacion_visitantes_obj=self.pool.get('config_captacion_visitantes')
            config_captacion_visitantes_ids=config_captacion_visitantes_obj.search(cr,uid,[('id','=',int(i.captacion_visitantes_id))],context=context)
            config_captacion_visitantes_datos=config_captacion_visitantes_obj.browse(cr,uid,config_captacion_visitantes_ids,context=context)
            promedio_poblacion=0
            for r in i.promedio_visitantes_ids:
                promedio_poblacion+=r.total_function/len(i.promedio_visitantes_ids)
            promedio_producto=0
            for p in i.canon_producto_id:
                promedio_producto+=p.monto_producto/len(i.canon_producto_id)
            total_poblacion_captada=(promedio_poblacion*promedio_producto*config_captacion_visitantes_datos['porcentaje'])/i.unidad_tributaria
            
            if total_poblacion_captada>0:
                count=1
            else:
                count=0
            res.append(promedio_poblacion)
            res.append(promedio_producto)
            res.append(total_poblacion_captada)
            res.append(count)
        return res
    
    def calculo_canon_total(self, cr, uid, ids, context=None):
        res={}
        total_canon=0.00
        ingreso_bruto=self.calculo_ingreso_bruto(cr, uid, ids, context=context)
        metros_ocupados=self.calculo_metros_ocupados(cr, uid, ids, context=context),
        poblacion_captada=self.calculo_poblacion_captada(cr, uid, ids, context=context)
        total_ing_bruto=ingreso_bruto[0]
        count_1=ingreso_bruto[1]
        for m in metros_ocupados:
            total_metros_ocupados=m[0]
            count_2=m[1]
        promedio_poblacion=poblacion_captada[0]
        promedio_producto=poblacion_captada[1]
        total_poblacion_captada=poblacion_captada[2]
        count_3=poblacion_captada[3]
        if count_1+count_2+count_3 > 0:
            total_canon=(total_ing_bruto+total_metros_ocupados+total_poblacion_captada)/(count_1+count_2+count_3)
        res={
            'total_ingreso_bruto':total_ing_bruto,
            'total_metros_ocupados':total_metros_ocupados,
            'promedio_poblacion_captada':promedio_poblacion,
            'promedio_productos_servicios':promedio_producto,
            'total_poblacion_captada':total_poblacion_captada,
            'total_canon_concesiones':total_canon,
        }
        return self.write(cr,uid,ids,res,context=context)
    
    def mostrar_porcentaje_bruto(self,cr,uid,ids,ingresos_brutos_id,context=None):
            config_ingresos_brutos_obj=self.pool.get('config_ingresos_brutos')
            config_ingresos_brutos_ids=config_ingresos_brutos_obj.search(cr,uid,[('id','=',int(ingresos_brutos_id))],context=context)
            config_ingresos_brutos_datos=config_ingresos_brutos_obj.browse(cr,uid,config_ingresos_brutos_ids,context=context)
            porcentaje=config_ingresos_brutos_datos['porcentaje']*100
            res={
                'porcentaje_bruto':str(porcentaje)+'%'
            }
            return {'value':res,}

    def mostrar_porcentaje_captacion(self,cr,uid,ids,captacion_visitantes_id,context=None):
            config_captacion_visitantes_obj=self.pool.get('config_captacion_visitantes')
            config_captacion_visitantes_ids=config_captacion_visitantes_obj.search(cr,uid,[('id','=',int(captacion_visitantes_id))],context=context)
            config_captacion_visitantes_datos=config_captacion_visitantes_obj.browse(cr,uid,config_captacion_visitantes_ids,context=context)
            porcentaje=config_captacion_visitantes_datos['porcentaje']*100
            res={
                'porcentaje_visitantes':str(porcentaje)+'%'
            }
            return {'value':res,}
            
            
    def confirmed_rendicion(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'confirm'},context=context)
        return True
        
    def cancel_rendicion(self,cr,uid,ids,context=None):
        self.write(cr, uid, ids, {'state':'cancel'},context=context)
        return True
        
    def eliminar_canon (self, cr, uid, ids, context=None):
        for c in self.browse(cr,uid,ids,context=context):
            self.write(cr, uid, ids, {'active': False,'state':'eliminar'},context=context)
        return True
    
    def generar_punto_cuenta(self,cr,uid,ids,context=None):
        for i in self.browse(cr,uid,ids,context=context):
            partner_id=i.partner_id
            monto=i.total_canon_concesiones
            id_canon=i.id
        
        return {
            'name': ('Punto de Cuenta'),
            'res_model': 'punto.cuenta',
            'type': 'ir.actions.act_window',
            'view_id': False,
            'view_mode': 'form,tree',
            'view_type': 'form',
            'limit': 80,
            'context': "{'default_partner_id': %d,'default_monto_numero': %f,'default_punto':False, 'default_canon_id': %d}" % (partner_id, monto, id_canon),
        }
        
    def create(self,cr,uid,values,context=None):
        h=self.pool.get('ir.sequence').get(cr,uid,'ip.canon.concesiones')
        values.update({
            'name':h,
            })
        canon_id=super(canon_concesiones,self).create(cr,uid,values,context=context)
        canon_data=self.browse(cr,uid,[canon_id])
        self.write(cr, uid, [canon_id], {'state':'draft'},context=context)
        self.write(cr,uid,[canon_id],{'name':h+'-'+canon_data.partner_id.name+'-'+canon_data.parque_id.name})
       
        
        return canon_id
            



class canon_concesiones_producto(osv.osv):
     
    _name="ip.canon.concesiones.producto"
    _rec_name="nombre_id"
    
   
    _columns = {
        'canon_concesiones_id':fields.many2one('ip.canon.concesiones', 'Rendir Boletos'),
        'nombre_id': fields.many2one('ip.producto.producto', 'Nombre', required=True, help='Parque'),
        'monto_producto':fields.integer('Monto', help='Monto producto',required=True,),
    }
    
    
class canon_producto (osv.osv):
     
    _name="ip.producto.producto"
    _rec_name="nombre"
    
    _columns = {
        'nombre':fields.char('Nombre', help='Nombre del producto'),
    }
    

